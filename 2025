select distinct viewer_id as id from(
select 
viewer_id,
count(*) as ct
from (select distinct * from views where author_id != viewer_id)p
group by viewer_id, view_date
)t where t.ct>1 order by t.viewer_id

select temp.problem_id from (select problem_id, ((likes*1.00/(likes+dislikes))*100) as per from Problems) temp
where temp.per < 60.00
order by 1


select
case
when (select count(*) from NewYork where score>=90) >  (select count(*) from California where score>=90) then 'New York University'
when (select count(*) from NewYork where score>=90) <  (select count(*) from California where score>=90) then 'California University'
else 'No Winner'
end as 'winner'



select id,
sum(case when month = 'Jan' then revenue else null end) as Jan_Revenue,
sum(case when month = 'Feb' then revenue else null end) as Feb_Revenue,
sum(case when month = 'Mar' then revenue else null end) as Mar_Revenue,
sum(case when month = 'Apr' then revenue else null end) as Apr_Revenue,
sum(case when month = 'May' then revenue else null end) as May_Revenue,
sum(case when month = 'Jun' then revenue else null end) as Jun_Revenue,
sum(case when month = 'Jul' then revenue else null end) as Jul_Revenue,
sum(case when month = 'Aug' then revenue else null end) as Aug_Revenue,
sum(case when month = 'Sep' then revenue else null end) as Sep_Revenue,
sum(case when month = 'Oct' then revenue else null end) as Oct_Revenue,
sum(case when month = 'Nov' then revenue else null end) as Nov_Revenue,
sum(case when month = 'Dec' then revenue else null end) as Dec_Revenue
from Department
group by id


------
with temp_table as (
    select *, max(salary) over(partition by company_id) as max_salary from Salaries
)

select company_id,employee_id,employee_name,
case
when max_salary < 1000 then round(salary)
when max_salary >= 1000 and max_salary<10001 then round((salary) - (salary*(24/100)))
else round((salary) - (salary*(49/100)))
end as salary
from temp_table


---------
with temp as (
select activity, count(*) as count1 from Friends
group by activity
)

select activity from temp 
where count1 not in (select min(count1) from temp)
and count1 not in (select max(count1) from temp)

---------
select count(*) as awith recursive temp as (
    select 1 as ids
    union all
    select ids+1 from temp where ids < (select max(customer_id) from Customers)
)

select ids from temp
where ids not in (select distinct customer_id from Customers)
order by 1ccounts_count from (
    select account_id from Subscriptions where year(end_date)>2020
    and account_id not in (select account_id from Streams where year(stream_date)=2021)
)t

----------------



select account_id,
day,
sum(case
when type = 'Deposit' then amount
else -amount end) over(partition by account_id order by day ) as balance
from Transactions


-----------------

with temp as (
select b.box_id,
b.apple_count+ifnull(c.apple_count,0) as total_apple_count,
b.orange_count+ifnull(c.orange_count,0) as total_orange_count
from Boxes b left join Chests c
on b.chest_id = c.chest_id
)

select sum(total_apple_count) as apple_count,
sum(total_orange_count) as orange_count from temp


---------------

# Write your MySQL query statement below
with temp as(
    select distinct salary, count(*) over(partition by salary) as c_val
    from Employees
)

select e.*, dense_rank() over(order by e.salary asc) as team_id from Employees e inner join
temp t on e.salary = t.salary
where t.c_val >= 2




